import{_ as s,o as a,c as n,V as l}from"./chunks/framework.a1fec281.js";const A=JSON.parse('{"title":"ECMAScript 2021","description":"","frontmatter":{},"headers":[],"relativePath":"EMACScript/ES2021.md","filePath":"EMACScript/ES2021.md","lastUpdated":1684745492000}'),o={name:"EMACScript/ES2021.md"},p=l(`<h1 id="ecmascript-2021" tabindex="-1">ECMAScript 2021 <a class="header-anchor" href="#ecmascript-2021" aria-label="Permalink to &quot;ECMAScript 2021&quot;">​</a></h1><h2 id="string-prototype-replaceall" tabindex="-1">String.prototype.replaceAll <a class="header-anchor" href="#string-prototype-replaceall" aria-label="Permalink to &quot;String.prototype.replaceAll&quot;">​</a></h2><p>新特性，针对全局字符串进行处理，不需要像以前那样使用<code>String.prototype.replace</code>和全局正则组合实现。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">it-is-just-a-test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// instead of doing this</span></span>
<span class="line"><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;it_is_just_a_test&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// in ES2021 we can do</span></span>
<span class="line"><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;it_is_just_a_test&quot;</span></span></code></pre></div><h2 id="promise-any" tabindex="-1">Promise.any <a class="header-anchor" href="#promise-any" aria-label="Permalink to &quot;Promise.any&quot;">​</a></h2><p><code>promise</code>组合中新增特性。<code>Promise.any</code>(<code>iterable</code>)有别于<code>Promise.all()</code>,只要其中的一个 <code>promise</code> 成功，就直接返回那个已经成功的 <code>promise</code> 。</p><p>参数<code>iterable</code>：一个可迭代的对象, 例如 <code>Array</code>。 返回值：</p><ul><li>这个方法用于返回第一个成功的 <code>promise</code> 。只要有一个 <code>promise</code> 成功此方法就会终止，它不会等待其他的 <code>promise</code> 全部完成。</li><li><code>fetch</code>等请求报错(404等)，需要自己<code>reject</code>才能被<code>catch</code>捕捉到。</li><li>这个方法将会忽略掉所有被拒绝的<code>promise</code>，直到第一个 <code>promise</code> 成功。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pErr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Always fails</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pSlow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Done eventually</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pFast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Done quick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">any</span><span style="color:#A6ACCD;">([pErr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pSlow</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pFast])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// pFast fulfils first</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// expected output: &quot;Done quick&quot;</span></span></code></pre></div><h2 id="weakrefs" tabindex="-1">WeakRefs <a class="header-anchor" href="#weakrefs" aria-label="Permalink to &quot;WeakRefs&quot;">​</a></h2><p><a href="https://github.com/tc39/proposal-weakrefs" target="_blank" rel="noreferrer">WeakRefs</a>提案 为JS带来了俩个构造器 <code>WeakRef</code> 和 <code>FinalizationRegistry</code> 此新特性是很复杂和底层的。</p><p><code>WeakRef</code></p><ul><li><code>WeakRef</code>对象允许您保留对另一个对象的弱引用，而不会阻止被弱引用对象被GC回收。</li><li>目前mdn不建议使用，因为<code>JavaScript</code>引擎中的行为有可能在另一个<code>JavaScript</code>引擎中的行为大相径庭，或者甚至在同一类引擎，不同版本中GC的行为都有可能有较大的差距。 <code>FinalizationRegistry</code></li><li><code>FinalizationRegistry</code> 对象可以让你在对象被垃圾回收时请求一个回调。</li><li>尽量避免使用。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ES2021</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objWeakRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakRef</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">objWeakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deref</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// returns obj in case it is still in memory</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// returns undefined in case it has been garbage collected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> registry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FinalizationRegistry</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">The </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> object has been garbage collected.</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ECMAScript 2021</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// perform some action that triggers garbage collector on obj</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The ECMAScript 2021 object has been garbage collected.</span></span></code></pre></div><h2 id="logical-assignment-operators-逻辑赋值操作符" tabindex="-1">Logical Assignment Operators 逻辑赋值操作符 <a class="header-anchor" href="#logical-assignment-operators-逻辑赋值操作符" aria-label="Permalink to &quot;Logical Assignment Operators 逻辑赋值操作符&quot;">​</a></h2><p>顾名思义，逻辑赋值操作符 是把逻辑操作符（&amp;&amp; , || 和 ??）和赋值操作符（=）组合起来，很方便地附加到语言中。 ​</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* Logical OR assignment (||=)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 逻辑或赋值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">||=</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将b赋值给a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只有当a为falsy时，才会被赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* if(formData.cost) formData.cost = formData.cost * 1e4;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 改写成</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* formData.cost &amp;&amp;= formData.cost * 1e4;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* Logical AND assignment (&amp;&amp;=)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 逻辑与赋值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">&amp;&amp;=</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将b赋值给a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只有当a为truthy时，才会被赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* Logical nullish assignment (??=)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 逻辑空值赋值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* nullish:在js中，一个空值可能是 null 或 undefined。空值总是Falsy。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">??=</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将b赋值给a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只有当a为空值（nullish）时，才会被赋值</span></span></code></pre></div><h2 id="numeric-separators-数字分隔符" tabindex="-1">Numeric separators 数字分隔符 <a class="header-anchor" href="#numeric-separators-数字分隔符" aria-label="Permalink to &quot;Numeric separators 数字分隔符&quot;">​</a></h2><p>解决大数比较难阅读问题。使用下划线（_, <code>U+005F</code>）实现，这个特性在其它语言中也很普遍。（比如：<code>Java</code>, <code>Python</code>, <code>Perl</code>, <code>Ruby</code>, <code>Rust</code>, <code>Julia</code>, <code>Ada</code>, <code>C#</code>等）。 同样适用于 <code>bigInt</code> 类型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// separators in decimal numbers</span></span>
<span class="line"><span style="color:#F78C6C;">1_000_000_000_000</span></span>
<span class="line"><span style="color:#F78C6C;">1_050.95</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// separators in binary numbers</span></span>
<span class="line"><span style="color:#F78C6C;">0b1010_0001_1000_0101</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// separators in octal numbers</span></span>
<span class="line"><span style="color:#F78C6C;">0o2_2_5_6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// separators in hex numbers</span></span>
<span class="line"><span style="color:#F78C6C;">0xA0_B0_C0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// separators in BigInts</span></span>
<span class="line"><span style="color:#F78C6C;">1_000_000_000_000_000_000_000</span><span style="color:#C792EA;">n</span></span></code></pre></div>`,20),e=[p];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
