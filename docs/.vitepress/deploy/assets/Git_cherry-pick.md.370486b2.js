import{_ as s,o as a,c as p,V as e}from"./chunks/framework.a1fec281.js";const g=JSON.parse('{"title":"进阶指南","description":"","frontmatter":{},"headers":[],"relativePath":"Git/cherry-pick.md","filePath":"Git/cherry-pick.md","lastUpdated":1711963633000}'),l={name:"Git/cherry-pick.md"},n=e('<h1 id="进阶指南" tabindex="-1">进阶指南 <a class="header-anchor" href="#进阶指南" aria-label="Permalink to &quot;进阶指南&quot;">​</a></h1><h2 id="基础操作" tabindex="-1">基础操作 <a class="header-anchor" href="#基础操作" aria-label="Permalink to &quot;基础操作&quot;">​</a></h2><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（ git merge ）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面命令就会将指定的提交 commitHash ，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。举例来说，代码仓库有 master 和 feature 两个分支</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a - b - c - d   Master         \\           e - f - g Feature</span></span></code></pre></div><p>现在将提交 f 应用到 master 分支</p><p>切换到 master 分支</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span></code></pre></div><p>Cherry pick 操作</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">f</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面的操作完成以后，代码库就变成了下面的样子:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a - b - c - d - f   Master         \\           e - f - g Feature</span></span></code></pre></div><p>master 分支的末尾增加了一个提交 f 。git cherry-pick 命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交</p><h2 id="进阶操作" tabindex="-1">进阶操作 <a class="header-anchor" href="#进阶操作" aria-label="Permalink to &quot;进阶操作&quot;">​</a></h2><p>Cherry pick 支持一次转移多个提交。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">Hash</span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">Hash</span><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。如果想要转移一系列的连续提交，可以使用下面的简便语法。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">A..B</span></span></code></pre></div><p>上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">A^..B</span></span></code></pre></div><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><p>git cherry-pick 命令的常用配置项如下。</p><p>（1） -e ， --edit</p><p>打开外部编辑器，编辑提交信息。</p><p>（2） -n ， --no-commit</p><p>只更新工作区和暂存区，不产生新的提交。</p><p>（3） -x</p><p>在提交信息的末尾追加一行 (cherry picked from commit ...) ，方便以后查到这个提交是如何产生的。</p><p>（4） -s ， --signoff</p><p>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p><p>（5） -m parent-number ， --mainline parent-number</p><p>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。-m 配置项告诉 Git，应该采用哪个分支的变动。它的参数 parent-number 是一个从 1 开始的整数，代表原始提交的父分支编号。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面命令表示，Cherry pick 采用提交 commitHash 来自编号 1 的父分支的变动。一般来说，1 号父分支是接受变动的分支（the branch being merged into），2 号父分支是作为变动来源的分支（the branch being merged from）。</p><h2 id="代码冲突" tabindex="-1">代码冲突 <a class="header-anchor" href="#代码冲突" aria-label="Permalink to &quot;代码冲突&quot;">​</a></h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p><p>（1） --continue</p><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（ git add . ），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--continue</span></span></code></pre></div><p>（2） --abort</p><p>发生代码冲突后，放弃合并，回到操作前的样子。</p><p>（3） --quit</p><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p><h2 id="转移到另一个代码库" tabindex="-1">转移到另一个代码库 <a class="header-anchor" href="#转移到另一个代码库" aria-label="Permalink to &quot;转移到另一个代码库&quot;">​</a></h2><p>Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git://gitUrl</span></span></code></pre></div><p>上面命令添加了一个远程仓库 target 。然后，将远程代码抓取到本地。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span></span></code></pre></div><p>上面命令将远程代码仓库抓取到本地。接着，检查一下要从远程仓库转移的提交，获取它的哈希值。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target/master</span></span></code></pre></div><p>最后，使用 git cherry-pick 命令转移提交。</p><div class="language-Bash"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">commitHas</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>',53),t=[n];function o(c,r,i,C,y,h){return a(),p("div",null,t)}const D=s(l,[["render",o]]);export{g as __pageData,D as default};
