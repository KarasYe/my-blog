import{_ as s,o as a,c as n,V as p}from"./chunks/framework.a1fec281.js";const F=JSON.parse('{"title":"Struct(结构体)","description":"","frontmatter":{},"headers":[],"relativePath":"Go/struct.md","filePath":"Go/struct.md","lastUpdated":1711963633000}'),l={name:"Go/struct.md"},o=p(`<h1 id="struct-结构体" tabindex="-1">Struct(结构体) <a class="header-anchor" href="#struct-结构体" aria-label="Permalink to &quot;Struct(结构体)&quot;">​</a></h1><h2 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h2><p><code>Go</code> 语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，<code>Go</code> 语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称 <code>struct</code>。 也就是我们可以通过 <code>struct</code> 来定义自己的类型了。</p><p><code>Go</code> 语言中通过 <code>struct</code> 来实现面向对象。</p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p><code>Go</code> 语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。<code>Go</code> 语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p><h2 id="自定义类型和类型别名" tabindex="-1">自定义类型和类型别名 <a class="header-anchor" href="#自定义类型和类型别名" aria-label="Permalink to &quot;自定义类型和类型别名&quot;">​</a></h2><h3 id="自定义类型" tabindex="-1">自定义类型 <a class="header-anchor" href="#自定义类型" aria-label="Permalink to &quot;自定义类型&quot;">​</a></h3><p>在 <code>Go</code> 语言中有一些基本的数据类型，如字符、整型、浮点型、布尔等数据类型，<code>Go</code> 语言中可以使用 <code>type</code> 关键字来定义自定义类型。</p><p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过 struct 定义。例如：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将MyInt定义为int类型</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInt</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span></code></pre></div><p>通过 Type 关键字的定义，MyInt 就是一种新的类型，它具有 int 的特性。</p><h3 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h3><p>类型别名是 Go1.9 版本添加的新功能。</p><p>类型别名规定：<code>TypeAlias</code>只是<code>Type</code>的别名，本质上<code>TypeAlias</code>与<code>Type</code>是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeAlias</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我们之前见过的rune和byte就是类型别名，他们的定义如下：</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">byte</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rune</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int32</span></span></code></pre></div><h2 id="两者区别" tabindex="-1">两者区别 <a class="header-anchor" href="#两者区别" aria-label="Permalink to &quot;两者区别&quot;">​</a></h2><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//类型定义</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NewInt</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//类型别名</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInt</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> a NewInt</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> b MyInt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type of a:%T</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//type of a:main.NewInt</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type of b:%T</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//type of b:int</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>结果显示 a 的类型是 <code>main.NewInt</code>，表示 <code>main</code> 包下定义的 <code>NewInt</code> 类型。b 的类型是 <code>int</code>。<code>MyInt</code> 类型只会在代码中存在，编译完成时并不会有 <code>MyInt</code> 类型。</p><h2 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>使用 <code>type</code> 和 <code>struct</code> 关键字来定义结构体，具体代码格式如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型名</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    字段名 字段类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    字段名 字段类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>1.类型名：标识自定义结构体的名称，在同一个包内不能重复;</li><li>2.字段名：表示结构体字段名。结构体中的字段名必须唯一;</li><li>3.字段类型：表示结构体字段的具体类型。</li></ul><p>举个例子，我们定义一个 Person（人）结构体，代码如下：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    city </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    age  </span><span style="color:#C792EA;">int8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 同样类型的字段也可以写在一行</span></span>
<span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">person1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> city </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    age        </span><span style="color:#C792EA;">int8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样我们就拥有了一个 person 的自定义类型，它有 name、city、age 三个字段，分别表示姓名、城市和年龄。这样我们使用这个 person 结构体就能够很方便的在程序中表示和存储人信息了。</p><p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型</p><h3 id="实例化" tabindex="-1">实例化 <a class="header-anchor" href="#实例化" aria-label="Permalink to &quot;实例化&quot;">​</a></h3><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p><p>结构体本身也是一种类型，我们可以像声明内置类型一样使用 <code>var</code> 关键字声明结构体类型。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    city </span><span style="color:#C792EA;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    age  </span><span style="color:#C792EA;">int8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> p1 person</span></span>
<span class="line"><span style="color:#A6ACCD;">    p1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pprof.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    p1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">city </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">北京</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    p1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">p1=%v</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//p1={pprof.cn 北京 18}</span></span>
<span class="line"><span style="color:#A6ACCD;">    fmt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">p1=%#v</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//p1=main.person{name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们通过.来访问结构体的字段（成员变量）,例如 p1.name 和 p1.age 等。</p>`,34),e=[o];function t(c,r,y,D,i,C){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
