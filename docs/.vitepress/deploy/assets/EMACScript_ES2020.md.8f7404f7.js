import{_ as s,o as a,c as n,V as l}from"./chunks/framework.a1fec281.js";const A=JSON.parse('{"title":"ECMAScript 2020","description":"","frontmatter":{},"headers":[],"relativePath":"EMACScript/ES2020.md","filePath":"EMACScript/ES2020.md","lastUpdated":1684745492000}'),o={name:"EMACScript/ES2020.md"},p=l(`<h1 id="ecmascript-2020" tabindex="-1">ECMAScript 2020 <a class="header-anchor" href="#ecmascript-2020" aria-label="Permalink to &quot;ECMAScript 2020&quot;">​</a></h1><h2 id="string-prototype-matchall" tabindex="-1">String.prototype.matchAll <a class="header-anchor" href="#string-prototype-matchall" aria-label="Permalink to &quot;String.prototype.matchAll&quot;">​</a></h2><p>比<code>match</code>方法返回更多的信息。 <code>matchAll()</code> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">From 2019.01.29 to 2019.01.30</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> regexp </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(?&lt;</span><span style="color:#A6ACCD;">year</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{4})</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">(?&lt;</span><span style="color:#A6ACCD;">month</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">(?&lt;</span><span style="color:#A6ACCD;">day</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})/</span><span style="color:#F78C6C;">gu</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> results </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regexp)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(results)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [ &#39;2019.01.29&#39;, &#39;2019.01.30&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">From 2019.01.29 to 2019.01.30</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> regexp </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(?&lt;</span><span style="color:#A6ACCD;">year</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{4})</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">(?&lt;</span><span style="color:#A6ACCD;">month</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">(?&lt;</span><span style="color:#A6ACCD;">day</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2})/</span><span style="color:#F78C6C;">gu</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> results </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matchAll</span><span style="color:#A6ACCD;">(regexp))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(results)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;2019.01.29&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;2019&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;01&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;29&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     index: 5,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     input: &#39;From 2019.01.29 to 2019.01.30&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     groups: [Object: null prototype] { year: &#39;2019&#39;, month: &#39;01&#39;, day: &#39;29&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;2019.01.30&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;2019&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;01&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     &#39;30&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     index: 19,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     input: &#39;From 2019.01.29 to 2019.01.30&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     groups: [Object: null prototype] { year: &#39;2019&#39;, month: &#39;01&#39;, day: &#39;30&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ]</span></span></code></pre></div><h2 id="dynamic-import" tabindex="-1">Dynamic Import <a class="header-anchor" href="#dynamic-import" aria-label="Permalink to &quot;Dynamic Import&quot;">​</a></h2><p>与<code>ECMAScript 2015</code>中引入的静态模块不同，动态导入可以实现按需获取。 这种类函数的格式(它不是继承自<code>Function.prototype</code>)返回一个<code>promise</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modulePage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(modulePage)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">module.</span><span style="color:#82AAFF;">default</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">helpersModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">helpers.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">import</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">helpersModule</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">total</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">module.</span><span style="color:#82AAFF;">sum</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="bigint" tabindex="-1">BigInt <a class="header-anchor" href="#bigint" aria-label="Permalink to &quot;BigInt&quot;">​</a></h2><p>解决大数相加计算问题。</p><ul><li>可以用在一个整数字面量后面加 <code>n</code> 的方式定义一个 <code>BigInt</code> ，如：10n，或者调用函数<code>BigInt()</code>。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 9007199254740991</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 9007199254740990  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 9007199254740991n</span></span></code></pre></div><h2 id="promise-allsettled" tabindex="-1">Promise.allSettled <a class="header-anchor" href="#promise-allsettled" aria-label="Permalink to &quot;Promise.allSettled&quot;">​</a></h2><p>解决了<code>Promise.all</code> 一个事件<code>reject</code>，全部不执行的问题。</p><ul><li>对于每个结果对象，都有一个 <code>status</code> 字符串。如果它的值为 <code>fulfilled</code>，则结果对象上存在一个 <code>value</code> 。如果值为 <code>rejected</code>，则存在一个 <code>reason</code> 。<code>value</code>（或 <code>reason</code> ）反映了每个 <code>promise</code> 决议（或拒绝）的值。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promise1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promise2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(reject</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promises </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [promise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> promise2]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">allSettled</span><span style="color:#A6ACCD;">(promises)</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">results</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(results))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Array [Object { status: &quot;fulfilled&quot;, value: 3 }, Object { status: &quot;rejected&quot;, reason: &quot;foo&quot; }]</span></span></code></pre></div><h2 id="globalthis" tabindex="-1">globalThis <a class="header-anchor" href="#globalthis" aria-label="Permalink to &quot;globalThis&quot;">​</a></h2><p>统一<code>js</code>各个运行环境的全局<code>this</code>指向。比如：</p><ul><li>浏览器中的<code>this</code></li><li><code>worker</code>中的<code>self</code></li><li><code>node</code>中的<code>global</code>等等 全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象（<code>global object</code>）。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> getGlobal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">global</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">global</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">unable to locate global object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> globals </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getGlobal</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> globals</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setTimeout </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 此环境中没有 setTimeout 方法！</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="for-in-mechanics" tabindex="-1">for-in mechanics <a class="header-anchor" href="#for-in-mechanics" aria-label="Permalink to &quot;for-in mechanics&quot;">​</a></h2><p><code>for...in</code>语句以任意顺序遍历一个对象的除<code>Symbol</code>以外的可枚举属性。 <code>for ... in</code>是为遍历对象属性而构建的，不建议与数组一起使用。 <code>for ... in</code> 在每个<code>js</code>引擎实现的<code>key</code>的顺序不一定一致。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> prop </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">prop</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Output:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;obj.a = 1&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;obj.b = 2&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;obj.c = 3&quot;</span></span></code></pre></div><h2 id="optional-chaining-可选链操作符" tabindex="-1">Optional chaining 可选链操作符 <a class="header-anchor" href="#optional-chaining-可选链操作符" aria-label="Permalink to &quot;Optional chaining 可选链操作符&quot;">​</a></h2><ul><li>可选链操作符( <code>?.</code> )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。</li><li><code>?.</code> 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空(<code>nullish</code> ) (<code>null</code> 或者 <code>undefined</code>)的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。</li><li>与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// before</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">article </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">article</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// after</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">article</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">title</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//也可以定义不确定变量属性</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">attr</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">[type]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="nullish-coalescing-operator-空值合并运算符" tabindex="-1">Nullish coalescing Operator 空值合并运算符 <a class="header-anchor" href="#nullish-coalescing-operator-空值合并运算符" aria-label="Permalink to &quot;Nullish coalescing Operator 空值合并运算符&quot;">​</a></h2><p>空值合并操作符（<code>??</code>）是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// expected output: &quot;default string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> baz </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(baz)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// expected output: 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//42</span></span></code></pre></div><h2 id="import-meta" tabindex="-1">i<wbr>mport.meta <a class="header-anchor" href="#import-meta" aria-label="Permalink to &quot;i&lt;wbr&gt;mport.meta&quot;">​</a></h2><p><code>i<wbr>mport.meta</code>是一个给<code>JavaScript</code>模块暴露特定上下文的元数据属性的对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-module.mjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="export-as-ns-from-mod" tabindex="-1">export * as ns from “mod” <a class="header-anchor" href="#export-as-ns-from-mod" aria-label="Permalink to &quot;export * as ns from “mod”&quot;">​</a></h2><p>允许开发人员以新名称导出另一个模块的命名空间外来对象。 ​</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> ns </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mod</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//类似于</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> ns </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mod</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">ns</span><span style="color:#89DDFF;">};</span></span></code></pre></div>`,34),e=[p];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
